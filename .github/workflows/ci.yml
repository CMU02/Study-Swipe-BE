name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download RDS SSL Certificate
        run: |
          curl -o global-bundle.pem https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem

      - name: Create .env file
        run: |
          cat > .env << EOF
          DB_HOST=${{ secrets.DB_HOST || 'localhost' }}
          DB_PORT=${{ secrets.DB_PORT || '5432' }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD || 'test_password' }}
          DB_USERNAME=${{ secrets.DB_USERNAME || 'postgres' }}
          DB_DATABASE=${{ secrets.DB_DATABASE || 'study_swipe' }}

          MAIL_FROM=no-reply@study-swipe.com

          AWS_REGION=${{ secrets.AWS_REGION || 'ap-northeast-2' }}
          SES_ACCESS_KEY=${{ secrets.SES_ACCESS_KEY || 'test_key' }}
          SES_SECRET_ACCESS_KEY=${{ secrets.SES_SECRET_ACCESS_KEY || 'test_secret' }}

          JWT_SECRET=${{ secrets.JWT_SECRET || 'test_jwt_secret_key_for_ci_testing_only' }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET || 'test_jwt_refresh_secret_key_for_ci_testing_only' }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY || 'sk-test-key' }}
          EOF

      # - name: Lint code
      #   run: npm run lint

      # - name: Run tests
      #   run: npm run test
      #   env:
      #     NODE_ENV: test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

  build-and-push:
    name: Build & Push Docker Image
    needs: [test, code-quality, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            PORT=3000
